name: Rust

on:
  push:
    branches:
      - test
  pull_request:
    branches:
      - test

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Install libtorch
      run: |
        wget https://download.pytorch.org/libtorch/cpu/libtorch-cxx11-abi-shared-with-deps-2.0.1%2Bcpu.zip
        unzip libtorch-cxx11-abi-shared-with-deps-2.0.1+cpu.zip
        mv libtorch /opt/
      shell: bash

    - name: Set LIBTORCH environment variable
      run: echo "LIBTORCH=/opt/libtorch" >> $GITHUB_ENV

    - name: Set LIBTORCH_INCLUDE environment variable
      run: echo "LIBTORCH_INCLUDE=/opt/libtorch" >> $GITHUB_ENV

    - name: Set LIBTORCH_LIB environment variable
      run: echo "LIBTORCH_LIB=/opt/libtorch" >> $GITHUB_ENV

    - name: Set LD_LIBRARY_PATH environment variable
      run: echo "LD_LIBRARY_PATH=/opt/libtorch/lib:$LD_LIBRARY_PATH" >> $GITHUB_ENV

    - name: Build
      run: cargo build --verbose

  test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.8'

    - name: Install libtorch
      run: |
        wget https://download.pytorch.org/libtorch/cpu/libtorch-cxx11-abi-shared-with-deps-2.0.1%2Bcpu.zip
        unzip libtorch-cxx11-abi-shared-with-deps-2.0.1+cpu.zip
        mv libtorch /opt/
      shell: bash

    - name: Set LIBTORCH environment variable
      run: echo "LIBTORCH=/opt/libtorch" >> $GITHUB_ENV

    - name: Set LIBTORCH_INCLUDE environment variable
      run: echo "LIBTORCH_INCLUDE=/opt/libtorch" >> $GITHUB_ENV

    - name: Set LIBTORCH_LIB environment variable
      run: echo "LIBTORCH_LIB=/opt/libtorch" >> $GITHUB_ENV

    - name: Set LD_LIBRARY_PATH environment variable
      run: echo "LD_LIBRARY_PATH=/opt/libtorch/lib:$LD_LIBRARY_PATH" >> $GITHUB_ENV

    - name: Prepare for testing
      run: |
        pip install -r ./utils/requirements.txt
        python ./utils/prepare_models.py
        # Copy the converted model files to a directory accessible to Rust tests
        cp -r models/distiluse-base-multilingual-cased/ .

    - name: Download models and dependencies
      run: |
        mkdir -p models/distilroberta_toxicity
        wget -P models/distilroberta_toxicity https://public.ukp.informatik.tu-darmstadt.de/reimers/sentence-transformers/v0.2/distiluse-base-multilingual-cased.zip
        unzip models/distilroberta_toxicity/distiluse-base-multilingual-cased.zip -d models/distilroberta_toxicity
      continue-on-error: true

    - name: Run Tests
      run: |
        cargo test --verbose
